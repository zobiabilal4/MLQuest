import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import joblib

# Load dataset
data = pd.read_csv('heart.csv')

# Separate features and target
X = data.drop(columns=['Heart_Disease'])
y = data['Heart_Disease']

# Define categorical and numerical features
categorical_features = ['General_Health', 'Exercise', 'Depression', 'Diabetes', 'Sex', 'Age_Category', 'Smoking_History', 'Alcohol_Consumption']
numeric_features = ['Weight_(kg)', 'BMI']

# Preprocessing for categorical data
categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))])

# Preprocessing for numerical data
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())])

# Bundle preprocessing for numerical and categorical features
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Create the pipeline with a model
model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('classifier', LogisticRegression(random_state=0))])

# Encode target variable
labelencoder = LabelEncoder()
y = labelencoder.fit_transform(y)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Train the model
model.fit(X_train, y_train)

# Save the model
joblib.dump(model, 'model_pipeline.pkl')
